---
title: "Implement Periodic Export of Data from D365FO to SFTP"
date: "2024-07-12T22:12:03.284Z"
tags: ["Integration", "XppDEVTutorial"]
path: "/integ-outboundsftp"
featuredImage: "./logo.png"
excerpt: "This blog post describes how to implement various scenarios for periodically exporting data from D365FO to a file and uploading it to SFTP."
---

**External integration** is a framework for implementing inbound and outbound integrations from D365FO. It supports several channels: Azure file share, SFTP, Azure service bus, and various integration types. The framework is designed to provide logging, error handling, and troubleshooting for various integration types.

In this blog post, I will describe how to implement periodic export of data from D365FO to a file and upload it to an SFTP server.

## SFTP server setup

Several years ago, Microsoft didn't support SFTP hosting, claiming it was obsolete in the cloud world. However, SFTP remains quite popular among clients. Finally, its support was added to the Azure storage service.

The option to access Azure storage via SFTP endpoint is described in the following topic: [SSH File Transfer Protocol (SFTP) support for Azure Blob Storage](https://learn.microsoft.com/en-us/azure/storage/blobs/secure-file-transfer-protocol-support). In brief, you need to create a storage account and enable SFTP access to it.

![SFTP Setup Azure](SFTPSetup.png)

Then, create an SFTP user:

![SFTP User creation](SFPTSetup2.png)

Please note that SFTP access incurs additional charges compared to Azure file storage (about $10 per day). Some alternatives to Azure SFTP, e.g., [files.com](https://files.com), provide additional functions, like more granular access control.

## Client library to connect to SFTP

There are several .NET libraries to work with SFTP, but probably the most popular is the open-source [SSH.NET](https://github.com/sshnet/SSH.NET). It adds a reference **Renci.SshNet.dll** that can be used in X++.

To work with SFTP from the user interface, I recommend [FileZilla](https://filezilla-project.org/).

![FileZilla](FileZilla.png)

## System setup

Let's discuss common setup options before exploring different integration scenarios.

### Connection types

The first form to set up an SFTP connection is **External integration â€“ Connection types**.

It requires the hostname and User/Password to access this host.

![Connection types](ConnectionTypes.png)

The password can be stored in several formats:

- Manual entry - An unencrypted string that may be used for dev testing.
- Encrypted - Encrypted value
- Azure Key Vault - Link to the standard D365FO key vault that stores the password

### Outbound message types

In Outbound message types, we set parameters for our export.

![Outbound message types](MessageTypeForm.png)

**Source group**
Here, we specify a link to the connection type and a folder on the SFTP server where to export the data.

**Processing group**
It contains a link to the class that performs the export. The class is a standard RunBase class (extended from **DEVIntegExportBulkBase**) that can define custom parameters and use some base class helper functions.

**File parameters**
The export often needs to create a file name with a **date** part in it. This setting allows the name template to be specified with the '%d' parameter. **Date format(%d)** defines how this symbol is converted to date (e.g., you can include date-time or use just date). The rules for format are defined by the standard .NET DateTime.ToString [format parameter](https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tostring?view=net-7.0#system-datetime-tostring(system-string)).

**Delimiter** defines a CSV-type delimiter.

**Advanced Group**
The advanced group defines used log types and a Company range validation. The export runs in the current company, and some exports may be logically related only to certain companies. The **Company range** allows you to specify a list of companies where the export may run.

## Export scenarios

Let's describe the most typical scenarios that can be used to export data from D365FO.

### Export store onhand data (no-code scenario)

**Business scenario**: *Our company has a store, and we want to export daily onhand data from this store to our website. We need to include ItemId, Warehouse, and AvailablePhysical value.*

The External integration module contains a **[DEVIntegExportBulkSQL](https://github.com/TrudAX/XppTools/blob/master/DEVTutorial/DEVExternalIntegration/AxClass/DEVIntegExportBulkSQL.xml)** class that allows exporting the result of a custom SQL string. This basic task can be done without writing any code.

```SQL
SELECT ITEMID, sum(availPhysical) as Qty, InventLocationId FROM INVENTSUM
WHERE CLOSEDQTY = 0 AND DATAAREAID = 'USMF' 
GROUP BY ITEMID, InventLocationId
HAVING sum(availPhysical) > 0
```

![Run onhand SQL export](OnhandSQLRun.png)

Then we can set up a standard daily batch job that generates a file in our output folder.

![Onhand SQL result](OnhandSQLResult.png)

### Export customers (no-code with data entity)

**Business scenario**: *In our D365FO ERP, we maintain clients and want to implement daily export to the external system. We want to export the Client Id, Name, and E-mail.*

This task is similar to the previous one, but we will fetch the data using a standard data entity.

```SQL
SELECT [CUSTOMERACCOUNT], ORGANIZATIONNAME, PRIMARYCONTACTEMAIL FROM [CUSTCUSTOMERV3ENTITY]
WHERE DATAAREAID = 'USMF'
```

Message type setup is as follows:

![Customers export setup](CustUSMF.png)

The result will be a file with customers:

![Customers export results](CustUSMFResult.png)

The examples above are great for prototyping, but "real world" export scenarios will likely be more complex than using a single **SELECT** statement, so you may need to write X++ code. *(One possible improvement is integrating the module with Data management and ER engines. If you have some working code that you can share, please contact me.)*

### X++ Export Implementation concept

The External Integration framework provides the following development concept: We can't predict how complex our exports will be. They may export to different sources (like SFTP, Azure storage, Service Bus, Web service), export data to one file or multiple files, require different parameters, etc. To cover all possible scenarios, we can use a standard **RunBaseBatch** class. 

However, export classes will have some common methods. So, I created a base **[DEVIntegExportBulkBase](https://github.com/TrudAX/XppTools/blob/master/DEVTutorial/DEVExternalIntegration/AxClass/DEVIntegExportBulkBase.xml)** (that extends RunBaseBatch) to store these common properties and methods (like variables to store the number of export records, methods to create logs, write data to a file, etc.). The Export class should extend it.

### Export onhand data (simple X++ based procedure)

Let's start with a simple case where you need to write X++ code that generates the export data.

**Business scenario**: *We want to export all companies' inventory onhand data to SFTP. Our export should be a CSV file containing the following fields: 'Company', 'ItemId', 'InventLocationId', 'LastUpdDatePhysical', 'AvailPhysical'.*

The following class solves this task:

```csharp
// Code snippet omitted for brevity
```

The class is quite simple, but it contains the following key parts: 

- A business definition for the export 
- An export flow

If you want to create a file per company instead of one file, you can easily modify it. The **External Integration** framework will handle all related processes. 

After we set up this class, we get the following file as a result: 

![Simple onhand setup](SimpleOnhandXpp.png)

### Export onhand and price data (X++ based on a query)

Let's consider an export scenario with more advanced logic.

**Business scenario**: *We want to implement a periodic export to SFTP of onhand data for one of our customers from their main Warehouse for a set of Items (the default should be the 'Audio' Item group, but it should be configurable). The export should be a CSV file that contains the following fields: 'ItemId', 'InventLocationId', 'AvailPhysical', 'Price'*

To do this, we need to create a [class](https://github.com/TrudAX/XppTools/blob/master/DEVTutorial/DEVExternalIntegrationSamples/AxClass/DEVIntegTutorialExportBulkOnhandPricesQuery.xml) that extends **DEVIntegExportBulkBase**. The code for this class contains the following blocks:

A method that defines the initial query and settings, providing default values that can be overridden by the user:

```csharp
// Code snippet omitted for brevity
```

A main export logic that initializes the file and uses the stored query to process export records:

```csharp
// Code snippet omitted for brevity
```

And a method that calculates the exported values:

```csharp
// Code snippet omitted for brevity
```

The settings for such a class will be the following:

![Prices query](PricesQuery.png)

The resulting file will look like this:

![Prices query results](PricesQueryResults.png)

As in the previous example, a developer writes only export business logic related to the export.

#### Warning message status

This class also contains a concept called a **Warning** status. An export may finish successfully or may have an exception during file generation (Error state). But sometimes, you need to log an event that the exported data has issues but still want to perform the export. For example, in our case, we can't find a price for some exported items. It is not a critical error, but we need to notify a user about this; they may adjust the query to exclude these items or notify another department to enter prices. To cover this scenario, the export class may mark the status as **Warning,** and the user may set a standard alert for it.

![Warning image](WarningImage.png)

The **Skipped** lines counter serves the same purpose. If we need to skip some lines and notify a user about this, we can increase the **Skipped** counter and see it in the log.

### Export invoices to the EDI provider (incremental X++ procedure)

Let's describe a scenario where we need an incremental export.

**Business scenario**: *Our company wants to export customer invoices to an external EDI system. The export runs daily and should include all invoices for this day. The export file should contain information about customer invoices, lines, and charges.*

To start this task, you get an EDI specification document and need to figure out how it will be mapped to D365FO data.

![Typical EDI structure](TypicalEDIStructure.png)

From practical experience, the first question to ask is how the EDI line data is defined. In the best scenario, it may match what you have in invoice lines, but in more complex cases, they can be defined on a more granular level (like related inventory transactions) or on a more summary level (e.g., lines grouped by Item number). Such requirements may even create quite complex system modifications to support such line splits.

The next decision is how to track incremental updates. A typical mistake that I sometimes see on projects is using the **CreatedDateTime** field for this. The idea is to export all data up to the current time, save this time, and next time process all records starting from this time. The problem with this approach is that it doesn't consider existing transactions. The SQL transaction may start at 1 pm, create an invoice at 1:05, and finish at 2 pm. If the export runs at 1:30, it will not see a 1:05 uncommitted transaction, and the invoice will not be exported. So, it is better to avoid such architecture.

To implement incremental tracking, I propose the following: Add 2 fields, **IsExported** and **ExportedDateTime**, to the invoices and update these fields after the export. It may not sound technically perfect (for example, [DMF](https://www.linkedin.com/pulse/d365-fscm-recurring-integrations-francisco-zanon/) may use SQL change tracking, so you don't need to add any fields), but it is very simple to troubleshoot, and it provides full visibility to a user. They can just open an invoice and see its status and when it was exported.

![EDI Invoice form](EDIInvoiceForm.png)

So when the export runs in the Incremental mode, it just takes all records that are not exported. Another advantage of this approach is there can be a situation when we need to reexport some data (for example, the export may contain errors, or we need to add additional information to the export). With these status fields, it is quite easy to implement.

The main **exportData** method:

```csharp
// Code snippet omitted for brevity
```

and method that translates invoice to EDI format:

```csharp
// Code snippet omitted for brevity
```

As an export, you will get a file similar to this one:

![EDI file results](EDIInvoiceResult.png)

Below are the dialog and parameters set up for this export. By default, we export invoices from US-005 customers incrementally, but the user can export All invoices for a period or an individual invoice if needed. 

![IncrementalEDIDialog](IncrementalEDIDialog.png)

## Troubleshooting and monitoring

Let's discuss how we can support our periodic exports.

### Test run parameter

One of the parameters of the base export class is a **Test run** checkbox. When running with this parameter, the export sends a file to a user's browser instead of SFTP. For incremental export, it will not update the "Last exported date" field, so it will not break the export sequence. This is very handy when you need to check what will be exported without putting anything on SFTP. Also, developers may develop exports without needing to have a connection to SFTP.

![Recent download file](RecentDownloadFile.png)

### Export Log

The export log allows one to view how many lines were exported and the time it took to perform the export. For failed jobs, we can set up a standard D365FO alert.

![Export log](ExportLog2.png)

### Test connection 

The **Test connection** button tries to connect to the specified SFTP folder and list files in it. So you can check the connection before running the export.

![Test connection](TestConnection.png)

## Summary

In this post, I have described different types of periodic exports to file from Dynamics 365 Finance and Operations based on the **External Integration** framework. We discussed the following exports:

- Simple SQL query export
- Export based on custom X++ code and query settings 
- Incremental X++ export

All used classes can be found on [GitHub](https://github.com/TrudAX/XppTools/tree/master/DEVTutorial/DEVExternalIntegrationSamples) and can be used as a starting point for your own integrations.

I hope you find this information useful. As always, if you see any improvements, suggestions, or have questions about this work, don't hesitate to contact me.